@page "/counter"
@* @page "/counter/{initialCount}" *@
@* @page "/counter/{initialCount?}" *@
@* @page "/counter/{initialCount:int?}" *@
@* @page "/counter2" *@
@rendermode Microsoft.AspNetCore.Components.Web.RenderMode.InteractiveServer

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

@* <button class="btn btn-primary" @onclick="IncrementCount">Click me</button> *@
@* <button class="btn btn-primary" @onclick="IncrementCountAsync">Click me</button> *@
@* <button class="btn btn-primary" @onclick="() => currentCount+=2">Click me</button> *@
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
@* <MyButton OnClick="IncrementCount" /> *@
@* <MyButton OnClick="IncrementCount">MyButton</MyButton> *@
<MyButton OnClick="IncrementCount" class="btn btn-success">MyButton</MyButton>

<div class="mt-3">
    @* <input @onchange="OnChange"> *@
    <input @oninput="OnInput">
    <p>@text</p>
</div>

<div style="background-color:lightblue" @onmouseover="MouseOver" @onmouseout="MouseOut">@divText</div>

<div class="btn btn-primary">
    @* <input value="@text" @onchange="OnChange"> *@
    <input @bind="text" @bind:event="oninput" @bind:after="Search">
    <button @onclick="OnClick">Clear</button>
    <p>@text</p>
    <p>@searchResult</p>
</div>

@* <p>InitialCount=@InitialCount</p> *@

@* @if (currentCount > 3)
{
<p>You win!</p>
}

<ul>
@for (int i = 0; i < currentCount; i++)
{
<li>Clicked</li>
}
</ul> *@

@code {
    private int currentCount = 0;
    string text = "";
    string divText = "Mouse out";
    string searchResult = "";

    @* protected override void OnInitialized()
{
currentCount = InitialCount;
} *@

    @* [Parameter]
public int IncrementAmount { get; set; } = 1; *@
    @* [Parameter] *@
    @* public string InitialCount { get; set; } *@
    @* public int InitialCount { get; set; } *@

    @* private void IncrementCount()
{
currentCount++;
} *@

    @* async Task IncrementCountAsync()
{
await Task.Delay(1000);
currentCount++;
} *@
    private void IncrementCount(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        currentCount++;
    }

    @* private void OnChange(ChangeEventArgs e)
{
text = (string)e.Value!;
} *@
    private void OnInput(ChangeEventArgs e)
    {
        text = (string)e.Value!;
    }

    private void MouseOver(Microsoft.AspNetCore.Components.Web.MouseEventArgs e) => divText = "Mouse over";

    private void MouseOut(Microsoft.AspNetCore.Components.Web.MouseEventArgs e) => divText = "Mouse out";

    private void OnChange(ChangeEventArgs e)
    {
        text = (string)e.Value!;
    }

    private void OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    {
        text = "";
    }

    async Task Search()
    {
        searchResult = "Searching...";
        await Task.Delay(2000);
        searchResult = $"Found {Random.Shared.Next()} results!";
    }
}
